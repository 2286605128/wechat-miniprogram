page {
    /* 
     ______________
    | 初始化页面样式 |
    |_____________|
    */
    background-color: var(--ghost-white);
    font-size: 28rpx;
    color: var(--black);
}
/* bgColor && text-color */
@colorType: null, dark, disabled, light;
@colors: red, fusion-red, orange, fusion-orange, yellow,
    fusion-yellow, olive, fusion-olive, green, fusion-green,
    blue-green, fusion-blue-green, cyan, fusion-cyan, sky-blue,
    fusion-sky-blue, blue, fusion-blue, purple, fusion-purple,
    mauve, fusion-mauve, pink, fusion-pink, brown, fusion-brown,
    blue-grey, fusion-blue-grey;

.colorType(@colorType);
.colorType(@colorType, @i: 1) when (length(@colorType) >= @i) {
    @typeName: extract(@colorType, @i);
    .color(@colors);
    .color(@colors, @j: 1) when (length(@colors) >= @j) {
        @name: extract(@colors, @j);
        .bgType(@typeName);
        // 判断是否是占位符
        .bgType(@typeName) when not( @typeName = null) {
            .bg-@{typeName}-@{name} {
                background-color: var(~'--@{typeName}-@{name}');
            }
        }
        .bgType(@typeName) when ( @typeName = null) {
            .bg-@{name} {
                background-color: var(~'--@{name}');
            }
        }
        .textType(@typeName);
        // 判断是否是占位符
        .textType(@typeName) when not( @typeName = null) {
            .text-@{typeName}-@{name} {
                color: var(~'--@{typeName}-@{name}');
            }
        }
        .textType(@typeName) when ( @typeName = null) {
            .text-@{name} {
                color: var(~'--@{name}');
            }
        }
        .color(@colors, (@j + 1));
    }
    .colorType(@colorType, (@i + 1));
}

/* 魂白背景 */
.bg-ghost-white {
    background-color: var(--ghost-white);
    color: var(--dark-gray);
}

/* 白色背景 */
.bg-white {
    background-color: var(--white);
    color: var(--dark-gray);
}

/* 透明 */
.bg-transparent {
    background-image: var(--transparent);
    color: var(--white);
}

/* 不正经黑色 */
.text-black {
    color: var(--black);
}
/* 暗灰色 */
.text-dark-gray {
    color: var(--dark-gray);
}
/* 灰色 */
.text-gray {
    color: var(--gray);
}
/* 烟灰色 */
.text-grey {
    color: var(--grey);
}
/* 魂白 */
.text-ghost-white {
    color: var(--ghost-white);
}
/* 白色 */
.text-white {
    color: var(--white);
}
// 透明色
.text-transparent {
    color: var(--transparent);
}

/* box-shadow && text-shadow */
@shadowColors: red, fusion-red, orange, fusion-orange, yellow,
    fusion-yellow, olive, fusion-olive, green, fusion-green,
    blue-green, fusion-blue-green, cyan, fusion-cyan, sky-blue,
    fusion-sky-blue, blue, fusion-blue, purple, fusion-purple,
    mauve, fusion-mauve, pink, fusion-pink, brown, fusion-brown,
    blue-grey, fusion-blue-grey, black, gray, dark-gray, grey;

.shadowColor(@shadowColors);
.shadowColor(@shadowColors, @i: 1) when (length(@shadowColors) >= @i) {
    @name: extract(@shadowColors, @i);
    .shadow-@{name} {
        box-shadow: var(--shadow-size) var(~'--@{name}');
    }
    .text-shadow-@{name} {
        text-shadow: var(--shadow-size) var(~'--@{name}');
    }
    .shadowColor(@shadowColors, (@i + 1));
}

/*
 __________
| ~~~~~~~~~|\
| 渐变背景色 |_\
| ~~~~~~~~ |
| ~~~~~~~~ |
|__________|
*/

@gradualColors: red, orange, yellow, green, cyan, blue, purple, light-purple, pink;

.gradualColor(@gradualColors);
.gradualColor(@gradualColors, @i: 1) when (length(@gradualColors) >= @i) {
    @name: extract(@gradualColors, @i);
    .bg-gradual-@{name} {
        background-image: var(~'--gradual-@{name}');
    }
    .gradualColor(@gradualColors, (@i + 1));
}
